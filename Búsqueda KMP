import java.util.*;

public class Busqueda_KMP{

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		String palabra = in.nextLine();
		String texto = in.nextLine();
		//String palabra = "xoxoxxo"; 
		//String texto = "xoxxooxxoxxxoxooxoxoxoxxo";
		Kmp buscador = new Kmp(palabra,texto);

		ArrayList<Integer> ubicaciones = buscador.buscar();
		if(!ubicaciones.isEmpty()){
			System.out.println("Ubicaciones encontradas en:");
			for(int i=0;i<ubicaciones.size();i++){
				System.out.println(ubicaciones.get(i)-(palabra.length()-2)+" - "+(ubicaciones.get(i)+1));
			}
		}else{
			System.out.println("No encontrado");
		}

	}//Fin Main.
}


class Kmp{
	String palabra;
	String texto;
	int[] regresos;
	int[] busqueda;
	Kmp(String palabra,String texto){
		this.palabra = palabra;
		this.texto = texto;
		Patron patron = new Patron(this.palabra);
		regresos = patron.getRegresos();
		busqueda = new int[this.texto.length()];
	}

	public ArrayList<Integer> buscar(){
		return search(this.palabra,this.texto,this.regresos,this.busqueda);
	}
	

	private ArrayList<Integer> search(String palabra,String texto, int[] regresos, int[] busqueda){
		ArrayList<Integer> ubicaciones = new ArrayList<Integer>();
		busqueda[0] = 0;
		for(int i=0;i<texto.length();i++){
		
			while(comprobar(texto,palabra,busqueda,i)==false){
				if(i==0 || busqueda[i-1] == -1){
					busqueda[i] = -1;
					break;
				}
				busqueda[i] = regresar(busqueda,regresos,i-1);
			}//Fin while.

			if(busqueda[i]==palabra.length()-1){
				ubicaciones.add(i);
				busqueda[i] = regresos[busqueda[i]];
			}
			
			if(i!=texto.length()-1)
				busqueda[i+1] = busqueda[i]+1;
		}//Fin for.


		return ubicaciones;
	}


	private boolean comprobar(String texto, String patron,int[] busqueda, int indice){
		int indice2 = busqueda[indice];
		if(patron.charAt(indice2) == texto.charAt(indice)) return true;
		return false;
	}

	private int regresar(int[] busqueda,int[] regresos,int indice){
		busqueda[indice] = regresos[busqueda[indice]];
		return busqueda[indice]+1;
	}
}//Fin clase Kmp.

class Patron{
	String patron;
	int[] regresos;

	//Constructores;
	Patron(String patron){
		this.patron = patron;
		regresos = new int [patron.length()];
	}


	//Métodos;
	public int[] getRegresos(){
		regresos[0] = -1;
		int aux=0; //esta variable me ayudará a no perder el valor de regresos[i]., cuando ya funcionó.

		for(int i=1;i<patron.length();i++){
			aux = regresos[i-1]; // guardo el valor de la posición anterior, que es la que estamos seguos que ya funcionó.
			regresos[i] = regresos[i-1]+1; //le asigno el valor de la posición anterior +1, y probaremos hasta ver cuál funciona:
			 	
			while(comprobar(patron,i,regresos[i])==false){
				if(regresos[i-1] == -1){ // preguntamos por el caso especial.
					regresos[i] = -1;
					regresos[i-1] = aux;
					break;
				}

				regresos[i] = regresar(regresos,regresos[i-1],i-1);
			}//Fin while.
			regresos[i-1] = aux;// volvemos a actualizar el valor anterior, que ya había funcionado.
		}//Fin for.	

		return regresos;
	}
	//Submétodos;
	private boolean comprobar(String patron,int indice_uno, int indice_dos){
		if (patron.charAt(indice_uno) == patron.charAt(indice_dos)) return true;
		else return false;
	}

	private int regresar(int[] regresos,int valor,int indice){
		regresos[indice] = regresos[valor];
		return regresos[indice]+1;
	}

}
